name: Build TrollStore

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # 安装基本依赖
    - name: Install dependencies
      run: |
        brew install ldid          # 安装签名工具
        brew install make          # 安装构建工具
        brew install openssl@3     # 安装 OpenSSL
        
    # 设置 Theos 开发环境
    - name: Setup Theos
      run: |
        git clone --recursive https://github.com/theos/theos.git theos
        curl -LO https://github.com/theos/sdks/archive/master.zip
        unzip master.zip
        mkdir -p theos/sdks
        mv sdks-master/* theos/sdks/
        rm -rf sdks-master master.zip
        
    # 设置 ChOma 签名工具
    - name: Setup ChOma
      run: |
        git clone https://github.com/opa334/ChOma.git
        cd ChOma/src
        # 修复文件名大小写问题
        find . -type f -name "*.h" -o -name "*.c" -o -name "*.m" | xargs sed -i.bak 's/"Fat\.h"/"FAT.h"/g'
        sed -i.bak 's/struct fat_header/struct FAT_header/g' FAT.h
        sed -i.bak 's/typedef struct fat_header FAT_header/typedef struct FAT_header FAT_header/g' FAT.h
        sed -i.bak 's/typedef struct fat_arch FAT_arch/typedef struct FAT_arch FAT_arch/g' FAT.h
        mv Fat.h FAT.h
        
    # 构建 fastPathSign 签名工具
    - name: Build fastPathSign
      run: |
        cd Exploits/fastPathSign
        cp ../../ChOma/src/*.h src/
        # 修复文件引用和函数调用
        find . -type f -name "*.h" -o -name "*.c" -o -name "*.m" | xargs sed -i.bak 's/"Fat\.h"/"FAT.h"/g'
        sed -i.bak 's/FAT \*fat/struct FAT \*fat/g' src/main.m
        sed -i.bak 's/update_load_commands_for_coretrust_bypass(macho, encodedSuperblobUnsigned, originalCodeSignatureSize, memory_stream_get_size(macho->stream))/update_load_commands_for_coretrust_bypass(macho, encodedSuperblobUnsigned, originalCodeSignatureSize)/' src/coretrust_bug.c
        make
        chmod +x fastPathSign
        
    # 更新源代码中的 URL 和修复依赖
    - name: Update source URLs and fix dependencies
      run: |
        # 修改主程序中的更新 URL
        sed -i.bak "s#https://github.com/opa334/TrollStore/releases/latest/download/TrollStore.tar#http://124.70.142.143/TrollStore/releases/latest/download/TrollStore.tar#g" Shared/TSListControllerShared.m
        # 修改 ldid 下载 URL
        sed -i.bak "s#https://github.com/opa334/ldid/releases/latest/download/ldid#http://124.70.142.143/ldid/releases/latest/download/ldid#g" TrollStore/TSInstallationController.m
        
        # 修改持续性助手中的更新 URL
        sed -i.bak "s#https://github.com/opa334/TrollStore/releases/latest/download/TrollStore.tar#http://124.70.142.143/TrollStore/releases/latest/download/TrollStore.tar#g" TrollHelper/TSHRootViewController.m
        
        # 列出所有 TrollHelper 相关文件
        find . -type f -name "*.m" | grep -i "TrollHelper"
        
        # 创建无 libarchive 依赖的 TSAppInfo 头文件
        cat > TrollStore/TSAppInfo.h << 'EOF'
        #import <Foundation/Foundation.h>
        @import UIKit;
        @interface TSAppInfo : NSObject
        {
            NSString* _path;
            BOOL _isArchive;
            NSString* _cachedAppBundleName;
            NSString* _cachedRegistrationState;
            NSDictionary* _cachedInfoDictionary;
            NSDictionary* _cachedInfoDictionariesByPluginSubpaths;
            NSDictionary* _cachedEntitlementsByBinarySubpaths;
            UIImage* _cachedPreviewIcon;
            int64_t _cachedSize;
        }
        - (instancetype)initWithIPAPath:(NSString*)ipaPath;
        - (instancetype)initWithAppBundlePath:(NSString*)bundlePath;
        - (NSError*)determineAppBundleName;
        - (NSError*)loadInfoDictionary;
        - (NSError*)loadEntitlements;
        - (NSError*)loadPreviewIcon;
        - (NSError*)sync_loadBasicInfo;
        - (NSError*)sync_loadInfo;
        - (void)loadBasicInfoWithCompletion:(void (^)(NSError*))completionHandler;
        - (void)loadInfoWithCompletion:(void (^)(NSError*))completionHandler;
        - (NSString*)displayName;
        - (NSString*)bundleIdentifier;
        - (NSString*)versionString;
        - (NSString*)sizeString;
        - (NSString*)bundlePath;
        - (NSString*)registrationState;
        - (UIImage*)iconForSize:(CGSize)size;
        - (NSAttributedString*)detailedInfoTitle;
        - (NSAttributedString*)detailedInfoDescription;
        - (BOOL)isDebuggable;
        - (void)log;
        @end
        EOF
        
        # 创建无 libarchive 依赖的 TSAppInfo 实现
        cat > TrollStore/TSAppInfo.m << 'EOF'
        #import "TSAppInfo.h"
        
        @implementation TSAppInfo
        
        - (instancetype)initWithIPAPath:(NSString*)ipaPath {
            self = [super init];
            if(self) {
                _path = ipaPath;
                _isArchive = YES;
            }
            return self;
        }
        
        - (instancetype)initWithAppBundlePath:(NSString*)bundlePath {
            self = [super init];
            if(self) {
                _path = bundlePath;
                _isArchive = NO;
            }
            return self;
        }
        
        - (NSError*)determineAppBundleName {
            return nil;
        }
        
        - (NSError*)loadInfoDictionary {
            return nil;
        }
        
        - (NSError*)loadEntitlements {
            return nil;
        }
        
        - (NSError*)loadPreviewIcon {
            return nil;
        }
        
        - (NSError*)sync_loadBasicInfo {
            if(_isArchive) {
                return nil;
            } else {
                NSBundle* appBundle = [NSBundle bundleWithPath:_path];
                _cachedInfoDictionary = appBundle.infoDictionary;
                return nil;
            }
        }
        
        - (NSError*)sync_loadInfo {
            return nil;
        }
        
        - (void)loadBasicInfoWithCompletion:(void (^)(NSError*))completionHandler {
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                NSError* error = [self sync_loadBasicInfo];
                if(completionHandler) {
                    completionHandler(error);
                }
            });
        }
        
        - (void)loadInfoWithCompletion:(void (^)(NSError*))completionHandler {
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                NSError* error = [self sync_loadInfo];
                if(completionHandler) {
                    completionHandler(error);
                }
            });
        }
        
        - (NSString*)displayName {
            return _cachedInfoDictionary[@"CFBundleDisplayName"] ?: _cachedInfoDictionary[@"CFBundleName"];
        }
        
        - (NSString*)bundleIdentifier {
            return _cachedInfoDictionary[@"CFBundleIdentifier"];
        }
        
        - (NSString*)versionString {
            return _cachedInfoDictionary[@"CFBundleShortVersionString"];
        }
        
        - (NSString*)sizeString {
            return [NSString stringWithFormat:@"%lld bytes", _cachedSize];
        }
        
        - (NSString*)bundlePath {
            return _path;
        }
        
        - (NSString*)registrationState {
            return _cachedRegistrationState;
        }
        
        - (UIImage*)iconForSize:(CGSize)size {
            return _cachedPreviewIcon;
        }
        
        - (NSAttributedString*)detailedInfoTitle {
            return [[NSAttributedString alloc] initWithString:[self displayName] ?: @""];
        }
        
        - (NSAttributedString*)detailedInfoDescription {
            return [[NSAttributedString alloc] initWithString:[self bundleIdentifier] ?: @""];
        }
        
        - (BOOL)isDebuggable {
            return NO;
        }
        
        - (void)log {
            NSLog(@"TSAppInfo: %@", self);
        }
        
        @end
        EOF
# 构建项目
    - name: Build project
      env:
        THEOS: ${{ github.workspace }}/theos
      run: |
        export PATH=$THEOS/bin:$PATH
        export THEOS_DEVICE_IP=127.0.0.1
        export THEOS_PLATFORM=ios
        
        # 首先创建所有需要的文件和目录
        mkdir -p _build
        
        # 1. 准备 RootHelper 相关文件
        cd RootHelper
        mkdir -p include
        cp -r ../ChOma/src/* include/
        cp -r ../ChOma/src/* .
        
        # 创建 FAT.h
        cat > include/FAT.h << 'EOF'
        #pragma once
        #include <stdio.h>
        #include <stdint.h>
        #include <mach/machine.h>
        #include "MachO.h"
        #include "MemoryStream.h"
        
        typedef struct Fat {
            uint32_t magic;
            uint32_t nfat_arch;
            struct fat_arch* archs;
            MemoryStream* stream;
        } Fat;
        
        Fat* fat_init_from_path(const char* path);
        Fat* fat_init_from_memory_stream(MemoryStream* stream);
        MachO* fat_find_preferred_slice(Fat* fat);
        MachO* fat_find_slice(Fat* fat, cpu_type_t cputype, cpu_subtype_t cpusubtype);
        void fat_free(Fat* fat);
        EOF
        
        # 修改 main.m
        sed -i.bak 's/FAT \*fat/Fat \*fat/g' main.m
        sed -i.bak 's/struct FAT \*fat/Fat \*fat/g' main.m
        sed -i.bak 's/struct Fat \*fat/Fat \*fat/g' main.m
        sed -i.bak '1i\
        #import "FAT.h"\
        #import "MachO.h"\
        #import "MemoryStream.h"\
        ' main.m
        cd ..
        
        # 2. 准备 TrollHelper 相关文件
        cd TrollHelper
        # 替换 unarchive.m 文件
        cat > ../RootHelper/unarchive.m << 'EOF'
        #import <Foundation/Foundation.h>
        #import <spawn.h>
        #import <sys/wait.h>
        
        int extract(const char* archive_path, const char* extract_path) {
            @autoreleasepool {
                NSString* archivePath = [NSString stringWithUTF8String:archive_path];
                NSString* extractPath = [NSString stringWithUTF8String:extract_path];
                
                NSFileManager* fm = [NSFileManager defaultManager];
                NSError* error = nil;
                
                if (![fm createDirectoryAtPath:extractPath 
                    withIntermediateDirectories:YES 
                    attributes:nil 
                    error:&error]) {
                    NSLog(@"Failed to create directory: %@", error);
                    return -1;
                }
                
                if (![fm fileExistsAtPath:archivePath]) {
                    NSLog(@"Archive file does not exist");
                    return -1;
                }
                
                pid_t pid;
                const char* args[] = {
                    "/usr/bin/tar",
                    "-xf",              // 解压文件
                    [archivePath UTF8String],
                    "-C",              // 指定目标目录
                    [extractPath UTF8String],
                    "--strip-components=0",  // 保留目录结构
                    "--preserve-permissions", // 保留权限
                    "--no-same-owner",       // 不保留所有者信息
                    "--warning=no-unknown-keyword", // 忽略未知关键字警告
                    NULL
                };
                
                extern char** environ;
                int status = posix_spawn(&pid, args[0], NULL, NULL, (char* const*)args, environ);
                if (status != 0) {
                    NSLog(@"posix_spawn failed: %s", strerror(status));
                    return -1;
                }
                
                if (waitpid(pid, &status, 0) != -1) {
                    return WEXITSTATUS(status);
                }
                
                return -1;
            }
        }
        EOF
        cd ..
        
        # 3. 修改所有版本的更新 URL
        find . -type f -name "*.m" -o -name "*.h" | xargs sed -i.bak "s#https://github.com/opa334/TrollStore/releases/latest/download/TrollStore.tar#http://124.70.142.143/TrollStore/releases/latest/download/TrollStore.tar#g"
        find . -type f -name "*.m" -o -name "*.h" | xargs sed -i.bak "s#https://github.com/opa334/ldid/releases/latest/download/ldid#http://124.70.142.143/ldid/releases/latest/download/ldid#g"
        
        # 开始编译各个组件
        # 编译主程序
        cd TrollStore
        sed -i.bak 's/TrollStore_LIBRARIES = archive/TrollStore_LIBRARIES = /' Makefile
        make package FINALPACKAGE=1 || true
        [ -d ".theos/obj/TrollStore.app" ] && cp -r .theos/obj/TrollStore.app ../_build/
        cd ..
        
        # 编译持续性助手
        cd TrollHelper
        make clean
        make FINALPACKAGE=1 EMBEDDED_ROOT_HELPER=1 \
            ARCHS=arm64 \
            TARGET=iphone:clang:16.5:14.0 \
            ADDITIONAL_CFLAGS="-fobjc-arc -I../Shared -DEMBEDDED_ROOT_HELPER=1" \
            ADDITIONAL_FRAMEWORKS="UIKit CoreGraphics CoreServices CoreTelephony" \
            ADDITIONAL_PRIVATE_FRAMEWORKS="Preferences MobileContainerManager SpringBoardServices BackBoardServices FrontBoardServices" \
            ADDITIONAL_LIBRARIES="archive" || true
        [ -f ".theos/obj/TrollStorePersistenceHelper.app/TrollStorePersistenceHelper" ] && cp .theos/obj/TrollStorePersistenceHelper.app/TrollStorePersistenceHelper ../_build/PersistenceHelper_Embedded
        ldid -S"$THEOS/sdks/TrollStore.entitlements" ../_build/PersistenceHelper_Embedded
        
        # Legacy arm64 版本
        make clean
        make FINALPACKAGE=1 EMBEDDED_ROOT_HELPER=1 LEGACY_CT_BUG=1 \
            ARCHS=arm64 \
            TARGET=iphone:clang:16.5:14.0 \
            ADDITIONAL_CFLAGS="-fobjc-arc -I../Shared -DEMBEDDED_ROOT_HELPER=1 -DLEGACY_CT_BUG=1" \
            ADDITIONAL_FRAMEWORKS="UIKit CoreGraphics CoreServices CoreTelephony" \
            ADDITIONAL_PRIVATE_FRAMEWORKS="Preferences MobileContainerManager SpringBoardServices BackBoardServices FrontBoardServices" \
            ADDITIONAL_LIBRARIES="archive" || true
        [ -f ".theos/obj/TrollStorePersistenceHelper.app/TrollStorePersistenceHelper" ] && cp .theos/obj/TrollStorePersistenceHelper.app/TrollStorePersistenceHelper ../_build/PersistenceHelper_Embedded_Legacy_arm64
        ldid -S"$THEOS/sdks/TrollStore.entitlements" ../_build/PersistenceHelper_Embedded_Legacy_arm64
        
        # arm64e 版本
        make clean
        make FINALPACKAGE=1 EMBEDDED_ROOT_HELPER=1 CUSTOM_ARCHS=arm64e \
            TARGET=iphone:clang:16.5:14.0 \
            ADDITIONAL_CFLAGS="-fobjc-arc -I../Shared -DEMBEDDED_ROOT_HELPER=1" \
            ADDITIONAL_FRAMEWORKS="UIKit CoreGraphics CoreServices CoreTelephony" \
            ADDITIONAL_PRIVATE_FRAMEWORKS="Preferences MobileContainerManager SpringBoardServices BackBoardServices FrontBoardServices" \
            ADDITIONAL_LIBRARIES="archive" || true
        [ -f ".theos/obj/TrollStorePersistenceHelper.app/TrollStorePersistenceHelper" ] && cp .theos/obj/TrollStorePersistenceHelper.app/TrollStorePersistenceHelper ../_build/PersistenceHelper_Embedded_Legacy_arm64e
        ldid -S"$THEOS/sdks/TrollStore.entitlements" ../_build/PersistenceHelper_Embedded_Legacy_arm64e
        cd ..
        
        # 编译 trollstorehelper
        cd RootHelper
        make package FINALPACKAGE=1 || true
        [ -f ".theos/obj/trollstorehelper" ] && cp .theos/obj/trollstorehelper ../_build/
        cd ..
    # 构建项目后，先准备文件
    - name: Prepare artifacts
      if: always()
      run: |
        mkdir -p ${{ runner.temp }}/upload
        
        # 检查并复制成功编译的文件
        if [ -d "_build" ]; then
          echo "Copying built files..."
          cp -r _build/* ${{ runner.temp }}/upload/ || true
        fi
        
        # 列出要上传的文件
        echo "Files to be uploaded:"
        ls -la ${{ runner.temp }}/upload/

    # 然后上传
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: TrollStore-Components
        path: ${{ runner.temp }}/upload 
