# 工作流名称
name: Build TrollStore

# 触发条件
on:
  # 当 main 分支有推送时触发
  push:
    branches: [ main ]
  # 允许手动触发
  workflow_dispatch:

jobs:
  build:
    # 使用 macOS 最新版本作为构建环境
    runs-on: macos-latest
    
    steps:
    # 检出代码,包括所有子模块
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    # 安装构建依赖
    - name: Install dependencies
      run: |
        brew install ldid        # 用于签名 iOS 二进制文件
        brew install make        # GNU make 工具
        brew install openssl@3   # OpenSSL 库
        brew install libarchive  # 用于处理归档文件
        brew install pkg-config  # 包配置工具
        
    # 设置 Theos 开发环境
    - name: Setup Theos
      run: |
        # 克隆 Theos 仓库
        git clone --recursive https://github.com/theos/theos.git theos
        # 下载并安装 iOS SDK
        curl -LO https://github.com/theos/sdks/archive/master.zip
        unzip master.zip
        mkdir -p theos/sdks
        mv sdks-master/* theos/sdks/
        rm -rf sdks-master master.zip
        
    # 构建 ChOma 工具
    - name: Build ChOma
      run: |
        cd ChOma
        make
        sudo make install
        cd ..
        
    # 构建 Pwnify 工具
    - name: Build Pwnify
      run: |
        cd Pwnify
        make
        sudo make install
        cd ..
        
    # 准备基础 IPA 文件
    - name: Prepare Victim IPA
      run: |
        # 保存当前工作目录
        WORK_DIR=$PWD
        
        # 安装 Flutter 和 Java 17
        brew install flutter
        brew install openjdk@17
        
        # 配置 Java 环境
        echo 'export PATH="/usr/local/opt/openjdk@17/bin:$PATH"' >> ~/.zshrc
        source ~/.zshrc
        export JAVA_HOME=$(/usr/libexec/java_home -v 17)
        
        # 创建临时 Flutter 项目
        flutter create victim_app
        cd victim_app
        
        # 修改 bundle identifier
        sed -i '' 's/com.example.victimApp/com.opa334.trollhelper/g' ios/Runner.xcodeproj/project.pbxproj
        
        # 修改应用名称
        sed -i '' 's/Victim App/TrollHelper/g' ios/Runner/Info.plist
        
        # 构建 archive
        flutter build ios --release --no-codesign
        
        # 手动创建 IPA
        mkdir -p $WORK_DIR/Victim
        cd build/ios/iphoneos
        mkdir -p Payload
        cp -r Runner.app Payload/
        zip -r $WORK_DIR/Victim/InstallerVictim.ipa Payload
        
        # 返回工作目录
        cd $WORK_DIR
        
        # 验证 IPA 文件
        ls -l Victim/InstallerVictim.ipa
        
    # 主要构建过程
    - name: Build project
      env:
        THEOS: ${{ github.workspace }}/theos
      run: |
        # 确保 Victim 目录和 IPA 文件存在
        ls -l Victim/InstallerVictim.ipa
        
        set -e
        export PATH=$THEOS/bin:$PATH
        export THEOS_DEVICE_IP=127.0.0.1
        export THEOS_PLATFORM=ios
        
        # 首先构建 fastPathSign 工具
        cd Exploits/fastPathSign
        make
        cd ../..
        
        # 按顺序构建各个组件
        make pre_build                      # 预构建准备
        make make_roothelper MAKECMDGOALS=all       # 构建 root 助手
        make make_trollstore MAKECMDGOALS=all       # 构建主程序
        make make_trollhelper_embedded MAKECMDGOALS=all  # 构建嵌入式助手
        make make_trollhelper_package MAKECMDGOALS=all   # 构建安装包
        make assemble_trollstore                    # 组装完整程序
        
        # 构建 TrollHelper IPA
        make build_installer15
        make build_installer64e
        
        make make_trollstore_lite MAKECMDGOALS=all      # 构建精简版
        
        # 创建发布目录
        mkdir -p release_files
        
        # 收集所有构建产物
        cp _build/TrollHelper_iOS15.ipa release_files/
        cp _build/TrollHelper_arm64e.ipa release_files/
        cp _build/TrollStore.tar release_files/
        cp _build/PersistenceHelper_* release_files/
        
        # 收集所有 deb 包
        mkdir -p release_files/debs
        find . -name "*.deb" -exec cp {} release_files/debs/ \;
        
        # 验证收集的文件
        echo "Checking collected files..."
        ls -lR release_files/
        
    # 上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TrollStore-Build
        path: release_files
        if-no-files-found: error  # 如果找不到文件就报错